//Este código no es completamente de nuestra autoría, se usaron las librerías de Arduino DHT.h, la librería PID  y 
// Matlab .fis a arduino C convertidor v2.0.1.25122016  autora                  
// - Karthik Nadig, EE. UU.                                                                                              
// https://github.com/karthiknadig/ArduinoFIS/problemas                      
//*********



#include <math.h>
#include "fis_header.h"
#include <DHT.h>
#define DHTTYPE DHT22
 
const int DHTPin = 6;
 
DHT dht(DHTPin, DHTTYPE);

const byte ch1 = 5;  
int tope = 0;
int c = 0;                                             
int p = 0;
int n=0;
int valor=0;
int g = 0;
int a = 0;
int adc_filtrado = 0;
int adc_raw = 0;
#define alpha 0.05
const byte interruptPin = 2;
volatile byte state = LOW;
int Modo = 2;
int extra1 = 10;
int extra2 = 11;
int humidi = 12;
int disi = 9;
float Potencia_1 = 0;     // valor inicial del cambio escalon. (min = 0)
float Potencia_2 = 0;   // Valor final del cambio escalon. (max = 100)
// Constantes de PID
float Kc = 0.105; float Tao_I = 31.35;
int Tiempo0 = 0; 
int A = 0;
float Potencia = 0;
unsigned long Tiempo_previo = 0; 
unsigned long Tiempo_actual = 0;
unsigned long y =0;
int Read_Delay = 250;   ///////////////////////// 250 PI 500 Fuzzy  // Periodo de muestreo en milisegundos
int Temperatura = 0;       // Celsius
float sp = 0;    

// Variables para PID
float PID_error = 0;
float previous_error = 0;
float PID_value = 0;
float Error_INT = 0;
float error_a = 0;
float error_d = -1;
float deri=0;
float integral =0;
// Número de entradas al sistema de inferencia borrosa
const int vector1 = 2;
// Number of outputs to the fuzzy inference system
const int vector2 = 1;
// Number of rules to the fuzzy inference system
const int fis_gcR = 25;

entrada[vector1];
Salida[vector2];

int Setpoint =25;

int pantalla =6;

void setup() {
  // put your setup code here, to run once:
Serial.begin(9600);

pinMode(extra2, OUTPUT);
pinMode(extra1, OUTPUT);

digitalWrite(extra2,HIGH);
digitalWrite(extra1,HIGH);
delay(500);
digitalWrite(extra2,LOW);
digitalWrite(extra1,LOW);

pinMode(disi, OUTPUT);
    
    pinMode(interruptPin, INPUT_PULLUP);
     attachInterrupt(digitalPinToInterrupt(interruptPin), dimmer, RISING);
pinMode(0 , INPUT);
pinMode(ch1,OUTPUT); 

}

int carro =0;
float temp = 0;

void loop() {


if (Serial.available()>0)
{
  
  String Recived = Serial.readString();
  if(int (Recived[0])==0)
  {
  pantalla =6;
  }
  else if(int (Recived[0])==1)
  {
  pantalla =1;
  }
   else if(int (Recived[0])==2)
  {
  pantalla =2;
  }

  else if(int (Recived[0])==3)
  {
  pantalla =3;
  }
 else if(int (Recived[0])==4)
  {
  pantalla =4;
  }
else  if(int (Recived[0])==5)
  {
  pantalla =5;
  }
 else if(int (Recived[0])==6)
  {
  pantalla =6;
  }
 
  

}
 
  
  int go=pantalla;

  
 int t=24;

switch (go){
  
  case 1:
  int val;
    Tiempo_actual = millis(); // Tiempo Actual    
     y = millis();
    valor = map(Potencia,0,100,900,0);
  adc_raw= analogRead(0);
 adc_filtrado = (alpha*adc_raw)+((1-alpha)*adc_filtrado);
 
  val=adc_filtrado;
  
  temp = log(((10240000/val) - 10000));
  temp = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * temp * temp ))* temp );
  temp = temp - 273.15-2.73;
  
      if(Tiempo_actual - Tiempo_previo >= Read_Delay){
         Tiempo_previo += Read_Delay;                

    if (y <= 700)
    {
      temp= Setpoint -1;
      }
   t=temp;
  if (t == Setpoint+1)
  {
    analogWrite(disi, 100);
    
    }

   else if (t == Setpoint+2)
   {
    analogWrite(disi, 130);
    }
 
else if (t == Setpoint+3)
   {
    analogWrite(disi, 150);
    }
 else if (t == Setpoint)
   {
    analogWrite(disi, 0);
    }
 else if (t < Setpoint)
   {
    analogWrite(disi, 0);
    }

    else if (t > Setpoint+3)
   {
    analogWrite(disi, 200);
    }

      
    if(Modo == 2){
    // Modo automatico (lazo cerrado)
    if(Tiempo_actual <= Tiempo0) {
       PID_value = 0;
    }
    else if (Tiempo_actual >= Tiempo0){
      PID_error = Setpoint - t;  //Calculo del error    
      Error_INT = Error_INT + PID_error*(1000/Read_Delay); //Calculo de la integral del error 
  
      PID_value = Kc*(PID_error + (1/Tao_I)*Error_INT);     //Calculo de la salida del controlador PI
      if (t > Setpoint)
      sp = Setpoint;
      
    }
    // Limite de salida del controlador
    if(PID_value < 0)
    {      PID_value = 0;       }
    if(PID_value > 10)
    {      PID_value = 10;    }

    Potencia = PID_value;   //Asignacion a la entrada de la planta.
    }    
       float ps =  Potencia *10;
        float mape = map(ps,0,25,1000,0);
    if (mape < 0)
    {
      mape =0;
      }
     
      if (t > Setpoint+1)
      mape = 960;
      
  Serial.print("Temp.val=");
  Serial.print(t);
  Serial.write(0xff);
  Serial.write(0xff);
 Serial.write(0xff);
   
        carro = mape;


if (t == Setpoint+1)
  {
    analogWrite(disi, 100);
    
    }

   else if (t == Setpoint+2)
   {
    analogWrite(disi, 130);
    }
 
else if (t == Setpoint+3)
   {
    analogWrite(disi, 150);
    }
 else if (t == Setpoint)
   {
    analogWrite(disi, 0);
    }
 else if (t < Setpoint)
   {
    analogWrite(disi, 0);
    }

    else if (t > Setpoint+3)
   {
    analogWrite(disi, 200);
    }

        digitalWrite(humidi,LOW);
    }
    
  break;


  case 2:

    Tiempo_actual = millis(); // Tiempo Actual    
     y = millis();
   
  adc_raw= analogRead(0);
 adc_filtrado = (alpha*adc_raw)+((1-alpha)*adc_filtrado);
 
  val=adc_filtrado;
  
  temp = log(((10240000/val) - 10000));
  temp = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * temp * temp ))* temp );
  temp = temp - 273.15-2.73;
  
if(Tiempo_actual - Tiempo_previo >= 500/*Read_Delay*/){
         Tiempo_previo += 500;//Read_Delay;           

if (y <= 700)
    {
      temp= Setpoint -1;
      }
   t=temp;
  
  error_d = t-Setpoint;
  error_a = error_a+ error_d *(1000/500/*/Read_Delay*/);
  if (error_a >= 200)
  {error_a = 200;}

  else if (error_a <= -200)
  {error_a = -200;}

  integral = error_a/50;

  
  ENTRADA__[1] = error_d;

  ENTRADA__[0] = integral;
  SALIDA__[0] = 0;
 Evaluacion();
  carro = SALIDA__[0];


  Serial.print("Temp.val=");
  Serial.print(t);
  Serial.write(0xff);
  Serial.write(0xff);
 Serial.write(0xff);
  
if (t == Setpoint+1)
  {
    analogWrite(disi, 100);
    
    }

   else if (t == Setpoint+2)
   {
    analogWrite(disi, 130);
    }
 
else if (t == Setpoint+3)
   {
    analogWrite(disi, 150);
    }
 else if (t == Setpoint)
   {
    analogWrite(disi, 0);
    }
 else if (t < Setpoint)
   {
    analogWrite(disi, 0);
    }

    else if (t > Setpoint+3)
   {
    analogWrite(disi, 200);
    }

  digitalWrite(humidi,LOW);
}
  
  break;

  case 3:
   t=20;
  
  error_d = t-Setpoint;
  error_a = error_a+ error_d *(1000/500/*/Read_Delay*/);
  if (error_a >= 200)
  {error_a = 200;}

  else if (error_a <= -200)
  {error_a = -200;}

  integral = error_a/50;

  
  ENTRADA__[1] = error_d;

  ENTRADA__[0] = integral;
  SALIDA__[0] = 0;
 Evaluacion();
  carro = SALIDA__[0];
  
 digitalWrite(humidi,LOW);
   digitalWrite(disi,LOW);

  break;


  case 4:
  
   t=30;
  error_d = t-Setpoint;
  error_a = error_a+ error_d *(1000/500/*/Read_Delay*/);
  if (error_a >= 200)
  {error_a = 200;}

  else if (error_a <= -200)
  {error_a = -200;}

  integral = error_a/50;

  
  ENTRADA__[1] = error_d;

  ENTRADA__[0] = integral;
  SALIDA__[0] = 0;
 Evaluacion();
  carro = SALIDA__[0];
  digitalWrite(disi,HIGH);
  digitalWrite(humidi,LOW);

  break;

 case 5:

   t=30;
  
  error_d = t-Setpoint;
  error_a = error_a+ error_d *(1000/500/*/Read_Delay*/);
  if (error_a >= 200)
  {error_a = 200;}

  else if (error_a <= -200)
  {error_a = -200;}

  integral = error_a/50;

  
  ENTRADA__[1] = error_d;

  ENTRADA__[0] = integral;
  SALIDA__[0] = 0;
 Evaluacion();
  carro = SALIDA__[0];
   
   analogWrite(disi,80);
    digitalWrite(humidi,HIGH);
 

  break;

  case 6:
 
   t=30;
  
  error_d = t-Setpoint;
  error_a = error_a+ error_d *(1000/500/*/Read_Delay*/);
  if (error_a >= 200)
  {error_a = 200;}

  else if (error_a <= -200)
  {error_a = -200;}

  integral = error_a/50;

  digitalWrite(humidi,LOW);
  ENTRADA__[1] = error_d;

  ENTRADA__[0] = integral;
  SALIDA__[0] = 0;
 Evaluacion();
  carro = SALIDA__[0];
   
   digitalWrite(disi,LOW);

  break;


  default :
Serial.println("no entra");
  }
 
}

void dimmer() {

   p = carro;             //!Tomar valor analogo
   //Serial.println(p);
   p = map(p, 0, 1023, 0, tope);          //!Ecuacion de la recta
   //Serial.println(p);
   c = 0;
  
  while(bitRead(PIND,2)){
    
    if (p < g){
    if(c >= p)digitalWrite(ch1,HIGH);
    }
    c++;  
    
    }
  
    tope = c;
    a = (tope * 2)/100;
    g = tope - a;                         //! 98% del ciclo util 
    digitalWrite(ch1,LOW); 

 }

FIS_TYPE fis_trapmf(FIS_TYPE x, FIS_TYPE* p)
{
    FIS_TYPE a = p[0], b = p[1], c = p[2], d = p[3];
    FIS_TYPE t1 = ((x <= c) ? 1 : ((d < x) ? 0 : ((c != d) ? ((d - x) / (d - c)) : 0)));
    FIS_TYPE t2 = ((b <= x) ? 1 : ((x < a) ? 0 : ((a != b) ? ((x - a) / (b - a)) : 0)));
    return (FIS_TYPE) min(t1, t2);
}

// Triangular Member Function
FIS_TYPE fis_trimf(FIS_TYPE x, FIS_TYPE* p)
{
    FIS_TYPE a = p[0], b = p[1], c = p[2];
    FIS_TYPE t1 = (x - a) / (b - a);
    FIS_TYPE t2 = (c - x) / (c - b);
    if ((a == b) && (b == c)) return (FIS_TYPE) (x == a);
    if (a == b) return (FIS_TYPE) (t2*(b <= x)*(x <= c));
    if (b == c) return (FIS_TYPE) (t1*(a <= x)*(x <= b));
    t1 = min(t1, t2);
    return (FIS_TYPE) max(t1, 0);
}

FIS_TYPE fis_min(FIS_TYPE a, FIS_TYPE b)
{
    return min(a, b);
}

FIS_TYPE fis_max(FIS_TYPE a, FIS_TYPE b)
{
    return max(a, b);
}

FIS_TYPE fis_array_operation(FIS_TYPE *array, int size, _FIS_ARR_OP pfnOp)
{
    int i;
    FIS_TYPE ret = 0;

    if (size == 0) return ret;
    if (size == 1) return array[0];

    ret = array[0];
    for (i = 1; i < size; i++)
    {
        ret = (*pfnOp)(ret, array[i]);
    }

    return ret;
}


//***********************************************************************
// Data for Fuzzy Inference System                                       
//***********************************************************************
// Pointers to the implementations of member functions
_FIS_MF fis_gMF[] =
{
    fis_trapmf, fis_trimf
};

// Count of member function for each Input
int fis_gIMFCount[] = { 5, 5 };

// Count of member function for each Output 
int fis_gOMFCount[] = { 5 };

// Coefficients for the Input Member Functions
FIS_TYPE fis_gMFI0Coeff1[] = { -14.5, -10.5, -9.5, -5.5 };
FIS_TYPE fis_gMFI0Coeff2[] = { -10, -5, 0 };
FIS_TYPE fis_gMFI0Coeff3[] = { -5, 0, 5 };
FIS_TYPE fis_gMFI0Coeff4[] = { 0, 5, 10 };
FIS_TYPE fis_gMFI0Coeff5[] = { 5.5, 9.5, 10.5, 14.5 };
FIS_TYPE* fis_gMFI0Coeff[] = { fis_gMFI0Coeff1, fis_gMFI0Coeff2, fis_gMFI0Coeff3, fis_gMFI0Coeff4, fis_gMFI0Coeff5 };
FIS_TYPE fis_gMFI1Coeff1[] = { -5.8, -4.2, -3.8, -2.2 };
FIS_TYPE fis_gMFI1Coeff2[] = { -4, -2, 0 };
FIS_TYPE fis_gMFI1Coeff3[] = { -2, 0, 2 };
FIS_TYPE fis_gMFI1Coeff4[] = { 0, 2, 4 };
FIS_TYPE fis_gMFI1Coeff5[] = { 2.2, 3.8, 4.2, 5.8 };
FIS_TYPE* fis_gMFI1Coeff[] = { fis_gMFI1Coeff1, fis_gMFI1Coeff2, fis_gMFI1Coeff3, fis_gMFI1Coeff4, fis_gMFI1Coeff5 };
FIS_TYPE** fis_gMFICoeff[] = { fis_gMFI0Coeff, fis_gMFI1Coeff };

// Coefficients for the Output Member Functions
FIS_TYPE fis_gMFO0Coeff1[] = { -270, -30, 30, 270 };
FIS_TYPE fis_gMFO0Coeff2[] = { 0, 300, 600 };
FIS_TYPE fis_gMFO0Coeff3[] = { 300, 600, 900 };
FIS_TYPE fis_gMFO0Coeff4[] = { 600, 900, 1200 };
FIS_TYPE fis_gMFO0Coeff5[] = { 930, 1170, 1230, 1470 };
FIS_TYPE* fis_gMFO0Coeff[] = { fis_gMFO0Coeff1, fis_gMFO0Coeff2, fis_gMFO0Coeff3, fis_gMFO0Coeff4, fis_gMFO0Coeff5 };
FIS_TYPE** fis_gMFOCoeff[] = { fis_gMFO0Coeff };

// Input membership function set
int fis_gMFI0[] = { 0, 1, 1, 1, 0 };
int fis_gMFI1[] = { 0, 1, 1, 1, 0 };
int* fis_gMFI[] = { fis_gMFI0, fis_gMFI1};

// Output membership function set
int fis_gMFO0[] = { 0, 1, 1, 1, 0 };
int* fis_gMFO[] = { fis_gMFO0};

// Rule Weights
FIS_TYPE fis_gRWeight[] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

// Rule Type
int fis_gRType[] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

// Rule Inputs
int fis_gRI0[] = { 1, 1 };
int fis_gRI1[] = { 1, 2 };
int fis_gRI2[] = { 1, 3 };
int fis_gRI3[] = { 1, 4 };
int fis_gRI4[] = { 1, 5 };
int fis_gRI5[] = { 2, 1 };
int fis_gRI6[] = { 2, 2 };
int fis_gRI7[] = { 2, 3 };
int fis_gRI8[] = { 2, 4 };
int fis_gRI9[] = { 2, 5 };
int fis_gRI10[] = { 3, 1 };
int fis_gRI11[] = { 3, 2 };
int fis_gRI12[] = { 3, 3 };
int fis_gRI13[] = { 3, 4 };
int fis_gRI14[] = { 3, 5 };
int fis_gRI15[] = { 4, 1 };
int fis_gRI16[] = { 4, 2 };
int fis_gRI17[] = { 4, 3 };
int fis_gRI18[] = { 4, 4 };
int fis_gRI19[] = { 4, 5 };
int fis_gRI20[] = { 5, 1 };
int fis_gRI21[] = { 5, 2 };
int fis_gRI22[] = { 5, 3 };
int fis_gRI23[] = { 5, 4 };
int fis_gRI24[] = { 5, 5 };
int* fis_gRI[] = { fis_gRI0, fis_gRI1, fis_gRI2, fis_gRI3, fis_gRI4, fis_gRI5, fis_gRI6, fis_gRI7, fis_gRI8, fis_gRI9, fis_gRI10, fis_gRI11, fis_gRI12, fis_gRI13, fis_gRI14, fis_gRI15, fis_gRI16, fis_gRI17, fis_gRI18, fis_gRI19, fis_gRI20, fis_gRI21, fis_gRI22, fis_gRI23, fis_gRI24 };

// Rule Outputs
int fis_gRO0[] = { 1 };
int fis_gRO1[] = { 1 };
int fis_gRO2[] = { 2 };
int fis_gRO3[] = { 3 };
int fis_gRO4[] = { 3 };
int fis_gRO5[] = { 1 };
int fis_gRO6[] = { 2 };
int fis_gRO7[] = { 3 };
int fis_gRO8[] = { 3 };
int fis_gRO9[] = { 4 };
int fis_gRO10[] = { 3 };
int fis_gRO11[] = { 4 };
int fis_gRO12[] = { 4 };
int fis_gRO13[] = { 5 };
int fis_gRO14[] = { 5 };
int fis_gRO15[] = { 4 };
int fis_gRO16[] = { 5 };
int fis_gRO17[] = { 5 };
int fis_gRO18[] = { 5 };
int fis_gRO19[] = { 5 };
int fis_gRO20[] = { 5 };
int fis_gRO21[] = { 5 };
int fis_gRO22[] = { 5 };
int fis_gRO23[] = { 5 };
int fis_gRO24[] = { 5 };
int* fis_gRO[] = { fis_gRO0, fis_gRO1, fis_gRO2, fis_gRO3, fis_gRO4, fis_gRO5, fis_gRO6, fis_gRO7, fis_gRO8, fis_gRO9, fis_gRO10, fis_gRO11, fis_gRO12, fis_gRO13, fis_gRO14, fis_gRO15, fis_gRO16, fis_gRO17, fis_gRO18, fis_gRO19, fis_gRO20, fis_gRO21, fis_gRO22, fis_gRO23, fis_gRO24 };

// Input range Min
FIS_TYPE fis_gIMin[] = { -10, -4 };

// Input range Max
FIS_TYPE fis_gIMax[] = { 10, 4 };

// Output range Min
FIS_TYPE fis_gOMin[] = { 0 };

// Output range Max
FIS_TYPE fis_gOMax[] = { 1200 };

//***********************************************************************
// Data dependent support functions for Fuzzy Inference System           
//***********************************************************************
FIS_TYPE fis_MF_out(FIS_TYPE** fuzzyRuleSet, FIS_TYPE x, int o)
{
    FIS_TYPE mfOut;
    int r;

    for (r = 0; r < fis_gcR; ++r)
    {
        int index = fis_gRO[r][o];
        if (index > 0)
        {
            index = index - 1;
            mfOut = (fis_gMF[fis_gMFO[o][index]])(x, fis_gMFOCoeff[o][index]);
        }
        else if (index < 0)
        {
            index = -index - 1;
            mfOut = 1 - (fis_gMF[fis_gMFO[o][index]])(x, fis_gMFOCoeff[o][index]);
        }
        else
        {
            mfOut = 0;
        }

        fuzzyRuleSet[0][r] = fis_min(mfOut, fuzzyRuleSet[1][r]);
    }
    return fis_array_operation(fuzzyRuleSet[0], fis_gcR, fis_max);
}

FIS_TYPE fis_defuzz_centroid(FIS_TYPE** fuzzyRuleSet, int o)
{
    FIS_TYPE step = (fis_gOMax[o] - fis_gOMin[o]) / (FIS_RESOLUSION - 1);
    FIS_TYPE area = 0;
    FIS_TYPE momentum = 0;
    FIS_TYPE dist, slice;
    int i;

    // calculate the area under the curve formed by the MF outputs
    for (i = 0; i < FIS_RESOLUSION; ++i){
        dist = fis_gOMin[o] + (step * i);
        slice = step * fis_MF_out(fuzzyRuleSet, dist, o);
        area += slice;
        momentum += slice*dist;
    }

    return ((area == 0) ? ((fis_gOMax[o] + fis_gOMin[o]) / 2) : (momentum / area));
}

//***********************************************************************
// Fuzzy Inference System                                                
//***********************************************************************
void Evaluacion()
{
    FIS_TYPE fuzzyInput0[] = { 0, 0, 0, 0, 0 };
    FIS_TYPE fuzzyInput1[] = { 0, 0, 0, 0, 0 };
    FIS_TYPE* fuzzyInput[vector1] = { fuzzyInput0, fuzzyInput1, };
    FIS_TYPE fuzzyOutput0[] = { 0, 0, 0, 0, 0 };
    FIS_TYPE* fuzzyOutput[vector2] = { fuzzyOutput0, };
    FIS_TYPE fuzzyRules[fis_gcR] = { 0 };
    FIS_TYPE fuzzyFires[fis_gcR] = { 0 };
    FIS_TYPE* fuzzyRuleSet[] = { fuzzyRules, fuzzyFires };
    FIS_TYPE sW = 0;

    // Transforming input to fuzzy Input
    int i, j, r, o;
    for (i = 0; i < vector1; ++i)
    {
        for (j = 0; j < fis_gIMFCount[i]; ++j)
        {
            fuzzyInput[i][j] =
                (fis_gMF[fis_gMFI[i][j]])(ENTRADA__[i], fis_gMFICoeff[i][j]);
        }
    }

    int index = 0;
    for (r = 0; r < fis_gcR; ++r)
    {
        if (fis_gRType[r] == 1)
        {
            fuzzyFires[r] = FIS_MAX;
            for (i = 0; i < vector1; ++i)
            {
                index = fis_gRI[r][i];
                if (index > 0)
                    fuzzyFires[r] = fis_min(fuzzyFires[r], fuzzyInput[i][index - 1]);
                else if (index < 0)
                    fuzzyFires[r] = fis_min(fuzzyFires[r], 1 - fuzzyInput[i][-index - 1]);
                else
                    fuzzyFires[r] = fis_min(fuzzyFires[r], 1);
            }
        }
        else
        {
            fuzzyFires[r] = FIS_MIN;
            for (i = 0; i < vector1; ++i)
            {
                index = fis_gRI[r][i];
                if (index > 0)
                    fuzzyFires[r] = fis_max(fuzzyFires[r], fuzzyInput[i][index - 1]);
                else if (index < 0)
                    fuzzyFires[r] = fis_max(fuzzyFires[r], 1 - fuzzyInput[i][-index - 1]);
                else
                    fuzzyFires[r] = fis_max(fuzzyFires[r], 0);
            }
        }

        fuzzyFires[r] = fis_gRWeight[r] * fuzzyFires[r];
        sW += fuzzyFires[r];
    }

    if (sW == 0)
    {
        for (o = 0; o < vector2; ++o)
        {
            SALIDA__[o] = ((fis_gOMax[o] + fis_gOMin[o]) / 2);
        }
    }
    else
    {
        for (o = 0; o < vector2; ++o)
        {
            SALIDA__[o] = fis_defuzz_centroid(fuzzyRuleSet, o);
        }
    }
}